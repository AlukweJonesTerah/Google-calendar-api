# def get_google_auth():
#     creds = None
#
#     try:
#         if os.path.exists("token.json"):
#             creds = Credentials.from_authorized_user_file("token.json", SCOPES)
#
#         if not creds or not creds.valid:
#             if creds and creds.expired and creds.refresh_token:
#                 creds.refresh(Request())
#             else:
#                 try:
#                     # Check if the client secret file exists
#                     if not os.path.exists("client_secret.json"):
#                         raise FileNotFoundError("Client secret file is missing")
#
#                     flow = InstalledAppFlow.from_client_secrets_file("client_secret.json", SCOPES)
#                     creds = flow.run_local_server(port=0)
#
#                     # Save the obtained token to the user's model
#                     if current_user.is_authenticated:
#                         current_user.set_google_calendar_token(creds.to_json())
#
#                     # Write the token to a local file
#                     with open("token.json", "w") as token_file:
#                         token_file.write(creds.to_json())
#                 except Exception as e:
#                     logging.error('Client secret file is missing: %s', e)
#                     raise ValueError("Client secret file is missing. Please check your configuration.")
#
#     except FileNotFoundError as e:
#         logging.error("Token file not found: %s", e)
#     except Exception as e:
#         logging.error("Error in get_google_auth: %s", e)
#
#     return credentials_to_dict(creds) if creds else None

def get_google_auth():
    creds = None

    try:
        if os.path.exists("token.json"):
            creds = Credentials.from_authorized_user_file("token.json", SCOPES)

        if not creds or not creds.valid:
            if creds and creds.expired and creds.refresh_token:
                creds.refresh(Request())
            else:
                flow = InstalledAppFlow.from_client_secrets_file("client_secret.json", SCOPES)
                creds = flow.run_local_server(port=0)

                # Save the obtained token to the user's model
                if current_user.is_authenticated:
                    current_user.set_google_calendar_token(creds.to_json())

                # Write the token to a local file
                with open("token.json", "w") as token_file:
                    token_file.write(creds.to_json())

    except FileNotFoundError as e:
        logging.error("Token file not found: %s", e)
    except Exception as e:
        logging.error("Error in get_google_auth: %s", e)

    return creds

@app.route('/oauth2callback')
def oauth2callback():
    try:
        # Get the stored credentials (if any)
        flow_creds = get_google_auth()
        state = session['oauth_state']

        if not state:
            return render_template('error.html', message='Invalid OAuth state'), 400

        # Create an OAuth flow using client secrets
        flow = InstalledAppFlow.from_client_secrets_file(
            'client_secret.json',
            scopes=['https://www.googleapis.com/auth/calendar'],
            state=state
        )

        try:
            # Use the authorization server's to fetch the OAuth 2.0 tokens.
            flow.fetch_token(authorization_response=request.url)
            logging.info('OAuth callback successful. Fetching Google Calendar API tokens.')
        except OAuth2Error as oauth_error:
            logging.error(f'OAuth error: {str(oauth_error)}')
            return render_template('error.html', message='OAuth error. Please try again.'), 500
        except Exception as e:
            logging.error(f'Error fetching OAuth tokens: {str(e)}')
            return render_template('error.html', message='Error fetching OAuth tokens'), 500

        # Store the credentials in the session.
        credentials = flow.credentials
        # session['credentials'] = credentials_to_dict(credentials)
        session['credentials'] = credentials_to_dict(credentials)

        # Check if the token needs refreshing
        if not flow_creds or not flow_creds.valid:
            if flow_creds and flow_creds.expired and flow_creds.refresh_token:
                try:
                    # Refresh the token
                    flow_creds.refresh(Request())
                    logging.info('Token refresh successful')

                    # Print the obtained token
                    obtained_token = flow_creds.to_json()
                    print(f"Obtained Token: {obtained_token}")

                    # Update the user's Google Calendar API token in the database.
                    current_user.set_google_calendar_token(flow_creds.to_json())
                    db.session.commit()
                    print(f"User ID: {current_user.id}, Google Calendar Token: {flow_creds.to_json()}")
                except Exception as e:
                    logging.error(f'Token refresh error: {str(e)}')
                    return render_template('error.html', message='Error refreshing OAuth tokens'), 500

                # Write the refreshed token to a local file
                with open("token.json", "w") as token:
                    token.write(flow_creds.to_json())

        # Check if credentials are present
        if not session['credentials']:
            logging.error('No credentials found in the session.')
            return render_template('error.html', message='No credentials found in the session.'), 500

        # Build the Google Calendar API service using stored credentials
        service = build('calendar', 'v3', credentials=session['credentials'])

    except Exception as e:
        logging.error(f'Error in oauth2callback: {str(e)}')
        return render_template('error.html', message='An error occurred during OAuth callback'), 500

    return redirect(url_for('index'))


def credentials_to_dict(credentials):
    return {
        'token': credentials.token,
        'refresh_token': credentials.refresh_token,
        'token_uri': credentials.token_uri,
        'client_id': credentials.client_id,
        'scopes': credentials.scopes,
    }


def get_google_calendar_service():
    try:
        # Use stored credentials for building the service
        credentials = get_google_auth()
        service = build('calendar', 'v3', credentials=credentials)

    except google.auth.exceptions.RefreshError as refresh_error:
        logging.error(f'Token refresh error: {str(refresh_error)}')
        raise ValueError('Error refreshing Google Calendar API token')  # Raise an exception on refresh error

    except google.auth.exceptions.AuthError as auth_error:
        logging.error(f'Authentication error: {str(auth_error)}')
        return render_template('error.html', message='Authentication error. Please re-authenticate.'), 401

    except google.auth.exceptions.TransportError as transport_error:
        logging.error(f'Transport error: {str(transport_error)}')
        raise ValueError('Error obtaining Google Calendar API service')  # Raise an exception on general error

    except HttpError as http_error:
        if http_error.resp.status == 401:
            # Redirect to the login page or trigger re-authentication
            return render_template('login.html', message='Authentication failed. Please log in again.'), 401
        else:
            logging.error(f'Google Calendar API Error: {http_error}')
            raise ValueError(f'Google Calendar API Error: {http_error}')  # Raise an exception on API error

    return service



def sync_with_calendar(user_id, date, time, title, location, description, background_tasks: BackgroundTasks):
    user = User.query.get(user_id)

    if not user:
        return 'User not found'

    google_calendar_token = user.get_google_calendar_token()

    if not google_calendar_token:
        app.logger.info(f'user_id: {user_id}, google_calendar_token: {google_calendar_token}')
        return 'Google Calendar token not found'

    # Convert the dictionary to a JSON string TODO: add
    google_calendar_token_str = json.dumps(google_calendar_token)
    # Parse the JSON string to get the 'token' field
    token_info = json.loads(google_calendar_token_str)
    token_str = token_info.get('token', '')

    # creds = Credentials.from_authorized_user_info(google_calendar_token, SCOPES)
    creds = Credentials.from_authorized_user_info(google_calendar_token_str, SCOPES)
    # creds = get_google_auth()
    try:
        # Create Google Calendar API service
        service = build('calendar', 'v3', credentials=creds)

        # Convert date and time to a Python datetime object
        event_datetime = datetime.strptime(f'{date}T{time}', '%Y-%m-%dT%H:%M')

        # Prepare event data
        event_data = {
            'summary': title,
            'location': location,
            'description': description,
            'colorId': 6,
            'start': {
                'dateTime': event_datetime.isoformat(),
                'timeZone': TIME_ZONE,
            },
            'end': {
                'dateTime': event_datetime.isoformat(),
                'timeZone': TIME_ZONE,
            },
            'recurrence': [
                'RRULE:FREQ=DAILY;COUNT=3'
            ],
            'attendees': [
                {'email': 'tj.papajones@gmail.com'},
                {'email': 'examle@gmail.com'},
                {'email': 'jtalukwe@kabarak.ac.ke'},
            ],
            'reminders': {
                'useDefault': False,
                'overrides': [
                    {'method': 'email', 'minutes': 24 * 60},
                    {'method': 'popup', 'minutes': 10},
                ],
            },
        }

        # Send request to create event
        # event = service.events().insert(calendarId=CALENDAR_ID, body=event_data).execute()
        # Send request to create event
        event_response = service.events().insert(calendarId=CALENDAR_ID, body=event_data).execute()

        # Additional events with the created event
        event_dict = json.loads(event_response)
        event_id = event_dict['id']

        # Convert event_datetime to UTC before storing in the database
        event_datetime_utc = event_datetime.replace(tzinfo=timezone.utc)
        # store_event_details(user_id, event_id, event_datetime_utc, title, location, description)

        # Schedule a reminder in the background
        reminder_offset_minutes = 10  # You may need to adjust this value
        reminder_message = send_reminder(user_id, date, time, reminder_offset_minutes, background_tasks)
        background_tasks.add_task(send_actual_reminder, user_id, reminder_message)

        return f'Google Calendar: Appointment scheduled for {event_datetime_utc} was successfully'

    except HttpError as error:
        if error.resp.status == 401:
            return 'Google Calendar API Error: Authentication failed. Please re-authenticate.'
        else:
            logging.error(f'Google Calendar API Error for User {user_id}: {error}')
            return f'Google Calendar API Error for User {user_id}: {error}'
    except Exception as e:
        logging.error(f'Google Calendar API Error for User {user_id}: {str(e)}')
        return f'Google Calendar API Error for User {user_id}: {str(e)}'